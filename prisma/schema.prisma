// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id               String                @id @default(cuid())
  email            String                @unique
  name             String?
  emailVerified    Boolean
  image            String?
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       Int?
  division         String
  district         String
  upazila          String
  stationName      String?
  stationId        String?
  securityCode     String?
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean               @default(false)
  twoFactorSecret  String?
  backupCodes      String[]              @default([])
  sessions         sessions[]
  accounts         accounts[]
  entries          MeteorologicalEntry[] @relation("UserEntries") // reverse relation
}

model Station {
  id           String   @id @default(cuid())
  stationId    String
  name         String
  securityCode String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model sessions {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String   @unique
  impersonatedBy String?
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, token])
}

model accounts {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId])
}

model verifications {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier])
}

model MeteorologicalEntry {
  id                        String   @id @default(cuid())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  userId                    String
  user                      users    @relation("UserEntries", fields: [userId], references: [id], onDelete: Cascade) // âœ… match name
  dataType                  String
  stationNo                 String
  stationName               String
  year                      String
  subIndicator              String
  alteredThermometer        String
  barAsRead                 String
  correctedForIndex         String
  heightDifference          String
  correctionForTemp         String
  stationLevelPressure      String
  seaLevelReduction         String
  correctedSeaLevelPressure String
  afternoonReading          String
  pressureChange24h         String
  dryBulbAsRead             String
  wetBulbAsRead             String
  maxMinTempAsRead          String
  dryBulbCorrected          String
  wetBulbCorrected          String
  maxMinTempCorrected       String
  Td                        String
  relativeHumidity          String
  squallConfirmed           String
  squallForce               String
  squallDirection           String
  squallTime                String
  horizontalVisibility      String
  miscMeteors               String
  pastWeatherW1             String
  pastWeatherW2             String
  presentWeatherWW          String
  c2Indicator               String
  observationTime           String
  timestamp                 String
}
